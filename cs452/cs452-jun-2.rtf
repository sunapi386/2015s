{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\froman\fcharset0 Times-Roman;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 Idle task never blocks.\
How to do call halt (a hardware interrupt) via Cirrus and ARM? \
When you come back from a halt, do nothing because no-one was running. \
The danger is /active/ is going to have a value no matter what, and you mess up from that.\
\
How do you know you just woke up from a hardware interrupt?\
\
In what environment can halt be executed? Halt can only be done by a privilege task, but our privileged tasks don\'92t have interrupts turned on. \
\

\b Handling hardware interrupts from a timer
\b0 \
Digging into the UART documentation:\

\f1 It is assumed the various registers for the UART are not written in quick succession to ensure data integrity. At least 2 UART clock period must occurs. The easiest way to do this is to separate the two writes by 55 NOPS.
\f0 \
\
There\'92s something called HCLK. (High speed clock). BCLK is slower. This goes to the PCI which clocks half of the UART. The other half is the bitrate. The UARTs took their from the time of VAX and haven\'92t changed because it\'92s simple and always works.\
\
There is particular bug that happens on the UART after 3-5 min, just checking CTS and sending a character very occasionally causes a character to drop. \
\
Many of you like to use the FIFO to talk to the train controller. You cannot. Because the train controller is not controlled by CTS. A standard way to talk to the controller is to wait until a certain amount of characters have accumulated and then shove those characters into FIFO. Sometimes you break when then buffer is full. \
\
You use escape codes to move cursors around the screen, and even escape codes span the size of the buffer. \
If you can\'92t send serial IO in and out, then your demo is over. \
\
UART Interrupts\
The UART gives 5 interrupts.\
1 When RDY bit sets (most likely to see when talking to the terminal)\
2 When Xmit buffer empties. Safe to put a character in the buffer, but unknown about the other end.\
3 Modem interrupt. Every time a change in the bits we flow control. You know your state machine has to move to a new state that has flow control l in the right state. \
4 FIFO \
5 OR of all the others.\
\
Only 1,2,5 are wired in to the ICU. The easiest one is to listen on 5 and check the bits. These change their meanings when you turn on FIFO. But FIFO on speeds up buy a factor of 10. But it is hard. It is incompatible with BUSY IO.\
\
When FIFO is on you can read n bytes in quick succession. Transmit work the other way. Why do you need #4 the special one? Think about stuff coming in. You get he interrupts saying there\'92s at least 8 and you read 8. That ca =neave you Where stuff aren\'92t t= ouched up\
\
Read the error register and UART to make debugging quicker.\
\
Implementation\
We have two standard primatives that almost all IO is base on.\
- get \
- put\
\
Notifier is going to say await event on a particular port on input. It\'92s going t get the yet that just cane in back, and the bye is sent to the sever and iiiias soon as server has accumulated to the buffer, it\'92ll reply to the client. \
\
Don\'92t let buffer full and fall behind. You want to be empty and blocked. If the client queue is getting longer, then you have too many gets.}