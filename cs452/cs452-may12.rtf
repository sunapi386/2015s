{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww33400\viewh19500\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 On monday we got down that a kernel looks like this:\
main \
	initialize\
	forever\
		schedule\
		getnextrequest\
		handle\
\
\
When we schedule we get back a variable which is the pointer to the task descriptor of the active task. \
We can get next request the \
Then we handle the request and schedule again.\
\
\
\
\
When we looked at get next request, the most important thing is done in activate(active), which saves the kernel state, install the active program, then it runs, and does a system call. The only non trial part of the kernel is create. When active calls a system call, its state is taken out of the processor and put away. The kernel\'92s state is put back. While the kernel is continuing running, it gets the request. And that\'92s the thing that is returned. We have to talk about how we program activate.\
\
Context Switch\
Activate, in its middle of its code, is going to have an entry point. Compilers don\'92t handle context switches very well. Careless use of optimization simply removes the actual switch into and out-of the active code. The optimizing compiler interprets that as a noop. \
We need to understand the hardware. \
\
The Grey Box\
Cirrus Logic makes a System on a Chip (EP9302). This contains an ARM processor (ARM 920T). Cirrus can buy a wire list, or it can buy a mask - that wire list already laid out. The interrupt control unit is bought from ARM. Technologic 720 is the entire box.\
Registers:\
- R15 is the Program Counter\
- R14 is the Link Register (branch and link). You put the old program counter in here, and a new PC. \
- R13 is the Stack Pointer\
- R12 is uses specially as part of a function call\
- R11 is the Frame Pointer. The local variables that are part of the function are given space on the stack. The stack pointer moves after storing the variables. The frame pointer and sits between the local variables and arguments are indexed off the frame pointer. Each time there is a function, there is a block added to the stack. When the function returns, the frame pointer is restored. At some point you\'92re going to need to change the frame pointer, during save & restore. You lose access to the variables of the old frame pointer! Do not try to access them after changing the frame pointer. You\'92re looking at a completely different part of the memory. You have to where the frame pointer is changed in your code to see what you can and can\'92t access.\
- R0-R3 are also treated specially by GCC. You put arguments in R0 to R3 and the arguments to the function are still sitting in there. They are picked up by the new function as part of its computation. \
- The remaining registers are the problem of the function itself. When a function is called, whatever in those are saved, and when it returns, they are put back. \
You should look at the ASM code to see how the compiler is managing. You don\'92t want to fight with compiler. It is very strong, and if you fight with it, it will win. \
\
This is the main part of the ARM architecture. There is, in addition, the Program Status word. Stuff that gets set: what mode are we operating in? Are the interrupts turned on or off? There are flags. When you look at an ARM instruction, what you see is that the high 4 bits have the same meaning as the 4 flags. Every single instruction in the ARM architecture (v4) is conditionally executed. It has some bits set, if OR\'92d with the status and are non-zero, then you do / don\'92t execute the instruction. Whatever. This means you can write very very tight loops. \
\
We need to worry about the value in the program status register. Most instruction do not take advantage of the conditional execution. GCC is not a compiler designed to make the most out of conditional execution possibilities. But there are a few that do, and one of the nice obscure mistakes during context switch is forgetting to put the flags back. Everything works very nicely, until you get to two instructions, one of the instruction setting the flags and one of them reading them. This occurs very infrequently, usually after 5 min of execution. \
\
You can think of the registers begin available in user mode. The kernel runs in supervisor mode. Its R0 to R12 are exactly the same as user mode. The kernel has its own values n the last 3 registers (R13, R14, R15). These cannot be overwritten, because the user tasks do not have access to. The execution of the      restore can be extremely streamlined. You notice that this R13 has to be put away and be saved, so when you come back to get the state, you\'92re going to need a stack pointer to find where the stack of the user program actually is. \
\
The 2nd thing that exists in supervisor mode is two program status words. PSW and SPSW. When we go into kernel mode, the PS gets destroyed. The extra program status word SPSW saves the user\'92s PS. \
\
This is enough for what we need to do. So what do we need to do to do a context switch? Let me show you how GCC does a function call (inserted by the compiler).\
1/ First, there is a piece of code that saves R0 to R3 (before the function is called).\
2/ and it puts arguments into those registers\
3/ the program call jumps to the function.\
4/ the compiler inserts some code into that call: moves SP -> IP. The old program counter went into the link register. After this is done, we push the state into the stack, using a store multiple instruction (STM).\
	PC\'92 -> LR\
	PC -> SP -> IP\
	STM lr, ip, fp -> stack\
Now with these things saved, your code starts to run. At the end of the function,\
	LDM pc, sp, fp. // this is the return statement\
This does in one instruction what normally takes a lot of instructions. This PC points to instruction of instruction of last call, and SP the last switch, etc. This is analogous to a context switch. \
\
The most important is saving and restoring. Instruction SWI jumps to a piece of code that does mv lr., pc, It is the only instruction in user mode that can move you into supervisor mode. It puts the current program counter into the link register. \
\
On Thursday I\'92ll talk about what SWI actually does. }