#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CS486 A1
\end_layout

\begin_layout Author
Jason Sun (#20387090)
\end_layout

\begin_layout Date
May 28, 2015
\end_layout

\begin_layout Section
Informed Search
\end_layout

\begin_layout Enumerate
Misplaced tile vs Manhattan distance heuristics
\end_layout

\begin_deeper
\begin_layout Enumerate
The Manhattan distance more accurately reflects the cost of each tile's
 displacement from its goal configuration.
 Consider two cases: case A where the 1 and 8 are interchanged versus case
 B where 1 and 2 are interchanged (from the goal configuration, labeled
 
\begin_inset Quotes eld
\end_inset

c
\begin_inset Quotes erd
\end_inset

 in the assignment): 
\end_layout

\begin_deeper
\begin_layout Itemize
The number of misplaced tile, for both cases, is equal to 2.
 But obviously case B is easier to solve than case A, which involves shuffling
 around more tiles and thus performing more steps.
 
\end_layout

\begin_layout Itemize
The Manhattan distance for both cases are different: the cost estimate for
 case A is higher than case B.
 Indeed it does cost more to solve case A because of more shuffling of tiles
 involved.
 
\end_layout

\end_deeper
\begin_layout Enumerate
By definition
\begin_inset Foot
status open

\begin_layout Plain Layout
AIMA (3rd ed.) p.
 95
\end_layout

\end_inset

, a heuristic is 
\emph on
consistent
\emph default
 (also called 
\emph on
monotone
\emph default
) if, for ever node 
\begin_inset Formula $n$
\end_inset

 and every successor 
\begin_inset Formula $n'$
\end_inset

 of 
\begin_inset Formula $n$
\end_inset

 generated by any action 
\begin_inset Formula $a$
\end_inset

, the estimated cost of reaching the goal from 
\begin_inset Formula $n$
\end_inset

 is no greater than the step cost of getting to 
\begin_inset Formula $n'$
\end_inset

 plus the estimated cost of reaching the goal from 
\begin_inset Formula $n'$
\end_inset

.
 
\begin_inset Formula 
\[
h(n)\leq c(n,a,n')+h(n')
\]

\end_inset

In the case of an 8-puzzle, each node 
\begin_inset Formula $n$
\end_inset

 represents a configuration state of where the tiles currently occupy on
 the tile.
 Each action 
\begin_inset Formula $a$
\end_inset

 is an action upon the blank position: up/down/left/right.
 The cost of any action is 1, because it takes one move to get to the next
 configuration 
\begin_inset Formula $n'$
\end_inset

.
 Now let's see if the two heuristics are consistent.
\end_layout

\begin_deeper
\begin_layout Enumerate
Number of misplaced tile is 
\emph on
not consistent
\emph default
.
 I claim this heurstic violates monotonicity.
 To be consistent is the same as predicting the cost in a monotonic fashion.
 That is, the cost estimate to arrive at the goal state must be strictly
 increasing for each step.
 But this is not the case.
 Take for example figure (a) in the given assignment.
 Because there is only one tile is out of place (the 6 tile), we know the
 previous state 
\begin_inset Formula $n_{-}$
\end_inset

 would've had at 2 misplaced tiles, because it is impossible to have less
 than 2 misplaced tiles due to where the blank space is located.
 So 
\begin_inset Formula $h(n_{-})\geq2$
\end_inset

 and the current state 
\begin_inset Formula $n$
\end_inset

 has exactly 1 misplaced tiles, 
\begin_inset Formula $h(n)=1$
\end_inset

.
 But any next action we make, the 6 tile cannot be put in the right location.
 Thus the next state 
\begin_inset Formula $n_{+}$
\end_inset

 would have at least 2 misplaced tiles.
 Therefore 
\begin_inset Formula $h(n_{+})\geq2$
\end_inset

.
 And we have it: the heurstics is not monotonic.
\end_layout

\begin_layout Enumerate
Manhattan distance is 
\emph on
consistent
\emph default
.
 This heurstics does not have the downfall of the previous one; with the
 previous one it was possible for 
\begin_inset Formula $h(n)$
\end_inset

 to decrease and then increase (the herustic failed to account for tiles
 that would have to be displaced again) – whereas the Manhattan does account
 for this.
 It accounts for this by factoring in the distance the tile is from the
 desired goal state.
 Thus potentially displaceing all those tiles.
 For all next moves that we need to displace a tile, the displaced tile's
 distance to its desired block is accounted for.
 
\end_layout

\end_deeper
\end_deeper
\begin_layout Enumerate
IDA*
\end_layout

\begin_deeper
\begin_layout Enumerate
IDA* use at most 
\begin_inset Formula $O(bd)$
\end_inset

 memory, where 
\begin_inset Formula $d$
\end_inset

 is depth, since A* picks a single node to expand at each level but still
 need to keep the other nodes queued up in case of backtracking.
 In terms of cost, the nodes on the bottom level (depth 
\begin_inset Formula $d$
\end_inset

) are explored once, those on the next-to-bottom are explored twice..
 up until to the root.
 Hence 
\begin_inset Formula $O(b^{d})$
\end_inset

 time cost in the worst.
\end_layout

\begin_layout Enumerate
Complete because in the worst case IDA* performs exactly the same as depth
 first search A*, and we know A* is complete, assuming good heuristic.
 
\end_layout

\begin_layout Enumerate
Optimal because if a goal state is found it must be the least deep, since
 the depth is only expanded after exploring all the nodes at that depth.
\end_layout

\end_deeper
\begin_layout Section
Constraint Satisfaction
\end_layout

\begin_layout Subsection
Formulating Sudoku as CSP
\end_layout

\begin_layout Paragraph
Variables 
\end_layout

\begin_layout Standard
81 variables, 1 representing each square.
\end_layout

\begin_layout Paragraph
Domains
\end_layout

\begin_layout Standard
Empty squares have domain of 
\begin_inset Formula $\{1,2,3,4,5,6,7,8,9\}$
\end_inset

.
\end_layout

\begin_layout Paragraph
Constaints
\end_layout

\begin_layout Standard
27 
\emph on
Alldiff
\emph default
 constraints: one for each row, column, and box of 9 squares.
\end_layout

\begin_layout Subsection
Sudoku Solver Runtime Summary
\end_layout

\begin_layout Standard
Source code is attached.
 Their md5 hashes should be:
\end_layout

\begin_layout Standard

\family typewriter
MD5 (BacktrackSolver.java) = 5e20bf43beef413d04cacc2f94d8fdd1 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (Cell.java) = 50480e3aad6a2496d6ee32802e6787d8 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (ForwardCheckingSuccessor.java) = d9be554d5157b134fb414ea7be73a925 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (Grid.java) = f6941858f85bd31baa0b91897f514e35 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (HeuristicsSuccessor.java) = 94dcd29b549f0481dc6d9a7c5c8e7fa3 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (Main.java) = a548d87bd0ce7de51b2f7ee69edf4f36 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (Puzzles.java) = 9a124be28d8ea4218cc402ffea612029 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (RandomSuccessor.java) = 0b0c0fe02e479c2da89b28c73a922749 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (RunStat.java) = 43888d6f91291329603a0020d8710f17 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (Statistics.java) = d011ea8efbd8d40cc4e68afe606c0b39 
\end_layout

\begin_layout Standard

\family typewriter
MD5 (SuccessorFunction.java) = d2aaa2b2f3d60eace6726877c44fdaf9 
\end_layout

\begin_layout Standard
All timing performed on 2.3 GHz Intel Core i7, 16 GB 1600 MHz DDR3, Java
 1.8.0_40 64-bit.
 
\end_layout

\begin_layout Standard
Format is in avTime ± stdTime in milliseconds.
 They are run 50 iterations.
\end_layout

\begin_layout Subsubsection*
Time
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B+FC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B+FC+H
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Easy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
58737.020000 ± 138057.375015
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.840000 ± 1.222457 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.020000 ± 0.140000 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timed out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.760000 ± 2.518412 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.560000 ± 0.571314 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Difficult
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timed out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.320000 ± 2.266627 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.340000 ± 0.473709
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evil
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timed out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.660000 ± 3.541807 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.640000± 0.520000 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
# of Nodes
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="4">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B+FC
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
B+FC+H
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Easy
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
7913745.800000 ± 19000004.059474
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.000000 ± 0.000000 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
2.000000 ± 0.000000 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Medium
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timed out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16.480000 ± 7.884770 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
16.000000 ± 0.000000 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Difficult
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timed out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
30.820000 ± 20.308314 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
19.000000 ± 0.000000 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Evil
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Timed out
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
55.780000 ± 60.872421 
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15.000000 ± 0.000000 
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection*
Note on time out
\end_layout

\begin_layout Standard
The timinig on the easy puzzle that the timing results varies a lot, and
 it's certain expected that medium, difficult, and evil puzzles would vary
 even more.
 I gave the same amount of and some of them took longer than 1 hour to solve.
\end_layout

\begin_layout Subsubsection*
Solution for Each Test Puzzle
\end_layout

\begin_layout Standard
Format: 81 numbers reading from the top to bottom column, left to right.
\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Easy
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
35976814221894367574615289358329746142763158996148523787231495619457632863582971
4
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Medium
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
87612943595348721642153679871986452334297586156831297418579364269425138723764815
9
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Difficult
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
61285947339514728647862395125648139783179652474923516856391874218457263992736481
5
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Labeling
\labelwidthstring 00.00.0000
Evil
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="1" columns="1">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
15274936879463815286325149747139628592587463138612574963951287424896751351748392
6
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection*
Code Details & Explainations
\end_layout

\begin_layout Standard
About the runtime.
\end_layout

\begin_layout Itemize
The runtime behaviour for B+FC+H is certainly expected, the number of goal
 states explored is expected to be the same for every run because the input
 is the same.
 Having heurstics implies having a deterministic way of going about to solve
 it.
 The timing varied a bit, but not by much.
 The timing is too short, the stddev is as large as the timing itself.
 So timing differences is probably due to kernel's scheduler.
\end_layout

\begin_layout Itemize
The runtime behaviour for B+FC is expected to have some variance, because
 the next states are not picked in a consistent manner.
 It is sitll much much faster than simple B alone.
\end_layout

\begin_layout Itemize
The runtime behaviour for B is definitely expected to be extremely long.
 I've tried to implement efficiently the code by using bitset representations
 for the cells.
 But still, the sheer number of states to explore is definitely expected.
 Although I suspect my code does better than others because I randomize
 order in which the next cell is to be filled and do not try to fill the
 same cell again.
\end_layout

\begin_layout Standard
Below is about the code.
 
\end_layout

\begin_layout Standard
The code is written in java and distributed across several files, in the
 java style.
 I describe those files and explain what they do below.
\end_layout

\begin_layout LyX-Code
 
\end_layout

\begin_layout Subsubsection*
Main
\end_layout

\begin_layout Standard
Mostly administrative stuff.
 Calls 3 timing functions, for each type of implementation.
 Collects the runtime stats and calls the mean and stddev calculations.
 
\end_layout

\begin_layout Subsubsection*
BacktrackSolver
\end_layout

\begin_layout Standard
Implements the backtracking algorithm found in textbook p.
 215 of AIMA, 3rd ed.
 This function is designed to take a 
\family typewriter
SuccessorFunction
\family default
 interface as input and we can abstract how the calculation part.
 
\end_layout

\begin_layout Standard
At each stage, recursive call, the grid is checked that it should be still
 possible to solve and that there does not exist internal conflicting numbers.
\end_layout

\begin_layout Subsubsection*
SuccessorFunction
\end_layout

\begin_layout Standard
This is an interface.
 Three implementations available: 
\family typewriter
RandomSuccessor
\family default
, 
\family typewriter
ForwardCheckingSuccesor
\family default
, 
\family typewriter
HeursticsSuccessor
\family default
, which respectively represents B, B+FC, B+FC+H solving methods.
\end_layout

\begin_layout Subsubsection*
RandomSuccessor
\end_layout

\begin_layout Standard
A random unfilled cell is chosen and new states (
\family typewriter
Grids
\family default
) are generated for each possible value in its list.
 The sort is actually a consistent random shuffle, for the sole purpose
 of keeping track what cells we have already guessed, so to prune the search
 space and not repeatedly guess the same cells.
 It is consistent because the cell comparator is created once and the value
 is final.
 It is random because the value is randomized on creation.
 I think this is pretty neat and include the relevant snippet below.
\end_layout

\begin_layout LyX-Code
public static class CellComparatorRandom implements Comparator<Cell> { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
private static Random random = new Random();
\end_layout

\begin_layout LyX-Code
private final int xMult = random.nextInt(1000); 
\end_layout

\begin_layout LyX-Code
private final int yMult = random.nextInt(1000); 
\end_layout

\begin_layout LyX-Code
private final int truncation = 200;
\end_layout

\begin_layout LyX-Code
@Override public int compare(Cell o1, Cell o2) { 
\end_layout

\begin_deeper
\begin_layout LyX-Code
int order1 = (o1.x * xMult + o1.y * yMult) % truncation; 
\end_layout

\begin_layout LyX-Code
int order2 = (o2.x * xMult + o2.y * yMult) % truncation; 
\end_layout

\begin_layout LyX-Code
return order1 - order2; 
\end_layout

\end_deeper
\begin_layout LyX-Code
} 
\end_layout

\end_deeper
\begin_layout LyX-Code
}
\end_layout

\begin_layout Subsubsection*
ForwardCheckingSuccessor
\end_layout

\begin_layout Standard
This builds upon the random successor, except it does FC, which does filtering
 on potential values on unfilled cells.
 For every unfilled cell, we can eliminate potential values that we've already
 seen in the row/column/region.
 A region is a 9x9 cell block.
\end_layout

\begin_layout Subsubsection*
HeuristicsSuccessor
\end_layout

\begin_layout Standard
This builds upon FC.
 The heuristics essentially sorts the collection of potential states by
 their 3 criterias.
 I implement the three criterias as comparison operators, for comparing
 state, into a priority queue.
\end_layout

\begin_layout Subsubsection*
Cell
\end_layout

\begin_layout Standard
A cell is just a list of values, and it is valid if and only if there is
 one value in the list.
 For efficiency, the list of possible values for the cell is implemented
 from 
\family typewriter
BitSet
\family default
 for efficiency.
\end_layout

\begin_layout Subsubsection*
Grid
\end_layout

\begin_layout Standard
A grid represents a 
\emph on
state
\emph default
 in solving the puzzle.
 It is a collection of 9x9 cells, and it indexes into the cell via a statically
 allocated array.
\end_layout

\begin_layout Subsubsection*
Statistics
\end_layout

\begin_layout Standard
A class that contain methods to calculate stddev and mean.
\end_layout

\begin_layout Subsubsection*
RunStat
\end_layout

\begin_layout Standard
This is a container to hold the result of an execution call to the 
\family typewriter
BacktrackSolver
\family default
.
 It contains the timing and number of nodes explored.
\end_layout

\begin_layout Subsubsection*
Puzzles
\end_layout

\begin_layout Standard
This is a container to store the inputs.
 There are 4 strings, each of length 81 and represents a test puzzle.
 The puzzle is represented in a left to right, top to bottom fashion.
 Unknown cells are filled with dashes 
\family typewriter
'-'
\family default
.
\end_layout

\end_body
\end_document
