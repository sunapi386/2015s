{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww12100\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \
Kernel has to:\
\
1/ Create task with priorities\
	- has keyword of exit(), task goes into zombie state\
	- a task has 3 states: active <-> ready, active -> zombie\
	\
\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural
\cf0 Initialize the kernel, create the \'93first user task\'94 which is a magic task, create for all programs that are going to run during the initialization phase. \
\
This task will create a bunch of other tasks. \
\
2/ Task has to communicate with other tasks\
	- using three primitives: send, receive, reply\
	- the end of send and end of reply are logically at the same place in your code\
\
	- Synchronization\
	- if you want a task to do something at particular time, it has to sync with something that keeps time\
	- send blocks and unblocks at the same time as reply finishes\
	- you get sync for free as part of 2; this will be so smart to do in 2-3, 4 days..\
\
3/ Interrupts\
	- you were talking to a timer to find out what time it was; now when the timer goes to zero, it wakes up the kernel\
	- this is straightforward\
\
4/ Serial IO\
	- this is where a lot of people spend most of their time\
	- requires lots of task coordinating to do something\
\
\
Task\
Organizational component for computation. When a bunch of things need to be done at once, Compare to threads, tasks are simple. They can only interact through #2 mechanism. Consists of 3 things:\
1/ A set of code\
	- you can more than one task run one instructions. e.g. 4 train drivers, but they differ in local state.\
2/ Constants, associated with the code\
	- mixed in with your assembly are strings that are constants. \
	- don\'92t mess around with constants to do communication!\
3/ State\
	- memory (stack): it is necessary to give the task some memory. decide how you\'92ll divide up the memory that you created\
	- context switch: registers (save away). interrupts can happen between any two instructions! this is critical\
	- task descriptor: contains all the information the kernel needs to manipulate the state of different tasks\
\
When you call create, you may create a task higher priority than the current task. It will run before the task that created it. Similarly for lower priority than current task. Also possible that it is the same priority, which depends exactly how you manage the queue. Do you put the task just created in front of, or behind?\
\
Aside: \
There are aspects of the kernel you\'92re creating your choice. At the beginning of the course I\'92m quite detailed and directive. When you get to the train project, you make all the decisions. Startup from undergraduate style, and end up in a graduate style. Quite appropriate for 4th year students.\
\
Userland\
This kernel is so small, it\'92s called a microkernel. Everything after 3/ are out in user land. The kernel runs so quick that we can afford to leave interrupts off. (We are 0 to 10 ms. In terms of the train, it is instant.)\
\
What is real-time?\
Definition of real time depends on context. E.g. CERN, picoseconds. Earthquake, minutes. \'93What\'92s my temporal granularity?\'94 Do I care where my train is to a cm? Probably. How about mm? No. Top speed of the train is 60 cm /s. \'93How long does it take the train to go a mm?\'94 \'9320msec\'94. This is probably the granularity. Now we know how big our temporal granularity is. Suppose the kernel can do something and get back out in 5 microseconds. That is nothing compared to this. We want to make the kernel run very fast.\
\
You may find very difficult bugs here, and you have to run it long enough for it to appear.\
\
void main() \
	initialize\
	FOREVER\
		handle( getRequest( schedule )\
// handle needs to know what its request is\
// to get request, it needs to look at the schedule\
scheduling involves complex data structures. they\'92re like weeds. they are only use useful when n is really large \'97 leave n really large for the database class. \
getRequest takes the next task and activates it. What does it mean to activate the task? The task was ready to run, it has to take the state of the kernel and put it away somewhere where it wouldn\'92t get damaged while the other tasks are running. \
\
where do you put the kernel\'92s stuff? on its stack. \
\
2 you have to find the state of the active task. when you find the state, you see where its stack pointer is, you find its registers on this, and let the kernel worry about the task descriptor. if the kernel is correct then the state is consistent. the task then runs for a little bit, and it comes to either create or exit. \
\
First user task is created in initialize and it runs first in the schedule. What state should you create a task in? You should create it in a state where it is all ready to be put on a processor. You have to know where you put things when you load the task, so that you can take it out in the right place. You have to decide where the state of the task goes when the task is not active. And that\'92s what we\'92ll talk about on tuesday. \
\
\
}