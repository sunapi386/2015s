{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 What you may not know is that is possible to do programmed io with an ethernet adapter. In other words, just the same kind of io as the UART. That\'92s how redboot manages to load things with very little code. \
\
Go is just a branch and link function call. The link register on the ARM gets the previous program counter. The link saves the old program counter. If your program just falls off at the end, it just returns cleanly. That\'92s a feature that\'92s worth knowing about.\
\
#3 feature: Examine and set memory. Without actually writing any program at all, you can send a character out of UART.\
\
Important: No matter what the buffer size is, if the rate at send/recv is different then the\'92ll be overflow. To prevent overflow, we use a busy bit. Every input output system has buffers. It\'92s /just/ a shift register and say you\'92re getting stuff in, it just puts itself right on the bus. Now any program that is handling an UART is just going to put that stuff into a buffer. It used to be a ^S would be stop sending. To start again, use ^Q. This is not a problem when you\'92re sending stuff 30 bytes a second. It gets to a problem when you get around 1000 bytes a second. A different way was invented to tell the computer not to send anymore. This is called software flow control \'97 sending stuff that is controlled by the software at the other end. There\'92s also hardware flow control. In the UART I talked about 3 wires: ground, transmit, receive. When there are small buffers, which are 1 byte in size in the train controller. It\'92s timed by a clock that is very slow compared to our computer, and it is easy to get into a situation of half a first byte and half of a second byte gets processed. This causes it to just hang up. This gives us two more wires: request to send RTS and clear to send CTS. Some RS\'97232 wires cross over. You read CTS whether it is okay to transmit or not. You need to check whether it is okay to send before you send stuff. Otherwise you easily get the train controller to just hang up on you. \
\
Error conditions in UART\
When two UARTs talk to one another, they are driven by clocks. There is an error register that you can read. First of all: a Framing Error - the UART did not find the stop bit where it expected it to be. If the two UART clocks are set at different speed, and if the stop bit doesn\'92t come as expected, it will give a framing error. Now you can choose to have parity bits in there so you can get a parity error, that the parity bit did not match the rest of the bits. That won\'92t be of any concern to you. There is a break condition that used to be used quite a bit and the break, they\'92re called the Break key on some keyboards. This key tells the other guy \'93give me a second I have screwed up\'94. The last error that you do care about is the overrun error. You did something that is before this guy was completely shifted out, so that the last stuff shifted out was the high order bits of another byte. And that tells you there\'92s a problem with your software and you\'92re not paying enough attention to the status bits. \
\
Phase\
Each time the clock ticks, we make a transition say from a 1 to a 0. But if the transitions happen atop of each other and the two UARTs are not in the same phase, then reading and sampling could cause reading errors. It could be sampling from the edges.\
\
\
System Admins figured out how to call from Toronto to LA without doing long distances, and they wanted to talk to other sysadmins. They had USENET back then, and had email close to the form that we had. The only difference is that you had to give it all the computers that it had to go through. USE GROUPS came into existence when universities knew about because }